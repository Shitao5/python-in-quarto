---
title: "python-in-quarto"
author: "shitao"
format: html
toc: true
---

以下测试代码来自[这里](https://hongtaoh.com/en/2022/10/05/wrangling/)。

Some content ...

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
```

# Data import and basic manipulation

```{python}
df = pd.read_csv('aiddata.csv')
df.head()
```

```{python}
# don't actually need the first two columns:
df = df.iloc[:, 2:]

# rename the columns
df.columns = ['year', 'donor', 'recipient', 'amount', 'purpose_code', 'purpose_name']
df.head()
```

```{python}
# check the shape
df.shape

# close to 10K rows!
```


```{python}
# check year range

min(df.year), max(df.year)
```

# Task 1

Some content ...

```{python}
# We first get the donation data
donation_data = []
for group in df.groupby(['year', 'donor']):
    # total amount of donation in that year for this country
    total_yearly_donation = sum(group[1].amount)
    # year, country name, total
    donation_data.append(
        (group[0][0], group[0][1], total_yearly_donation))
donation_df = pd.DataFrame(
    donation_data, columns=['year','country','donation'])
donation_df.head()
```

```{python}
# Then we get the receiving data
receiving_data = []
for group in df.groupby(['year', 'recipient']):
    # total amount of receiving in that year for this country
    total_yearly_receiving = sum(group[1].amount)
    # year, country name, total
    receiving_data.append(
        (group[0][0], group[0][1], total_yearly_receiving))
receiving_df = pd.DataFrame(
    receiving_data, columns=['year','country','receiving'])
receiving_df.head()
```

```{python}
all_cntry = list(df.donor) + list(df.recipient)
all_cntry = list(set(all_cntry))

# there are in total 47 unique countries
len(all_cntry)
```

```{python}
# We have so many countries. It's difficult to visualize them all in one plot
# So I am assigning groups to countries. 
# Basically, I want to plot 4 countires in each figure
cntry_group_list = list(np.arange(1,13)) * 4
del cntry_group_list[-1]
```

```{python}
receiving_df[receiving_df.year == 1973]
```

```{python}
# same issue for donation data
donation_df[donation_df.year == 1973]
```

```{python}
donation_dfs = []
for group in donation_df.groupby('year'):
    year = group[0]
    present_cntry = group[1].country.tolist()
    absent_cntry = [x for x in all_cntry if x not in present_cntry]
    absent_df = pd.DataFrame({
        'year': year,
        'country': absent_cntry,
        'donation': 0
    })
    dff = pd.concat([group[1], absent_df], ignore_index = True)
    
    dff.sort_values(by='country', ascending=True, inplace=True)
    dff['group'] = cntry_group_list
    donation_dfs.append(dff)
donation = pd.concat(donation_dfs, ignore_index = True)
donation.head()
```

```{python}
receiving_dfs = []
for group in receiving_df.groupby('year'):
    year = group[0]
    present_cntry = group[1].country.tolist()
    absent_cntry = [x for x in all_cntry if x not in present_cntry]
    absent_df = pd.DataFrame({
        'year': year,
        'country': absent_cntry,
        'receiving': 0
    })
    dff = pd.concat([group[1], absent_df], ignore_index = True)
    dff.sort_values(by='country', ascending=True, inplace=True)
    dff['group'] = cntry_group_list
    receiving_dfs.append(dff)
receiving = pd.concat(receiving_dfs, ignore_index = True)
receiving.head()
```

```{python}
# to check whether the countries in the two lists are the same
r_c = list(set(receiving.country))
d_c = list(set(donation.country))
r_c == d_c
```

```{python}
all_df = donation
all_df['receiving'] = receiving['receiving']
all_df['d_minus_r'] = all_df['donation'] - all_df['receiving']
all_df.head()
```

```{python}
all_df['year'] = pd.to_datetime(all_df['year'], format='%Y')
# We only plot group 1, for simplicity
group1 = all_df[all_df.group == 1]
```

```{python}
plt.figure()
alt.Chart(group1).mark_line().encode(
    x='year:T',
    y = alt.Y(
        'd_minus_r:Q',
        title = 'Donation minus receiving'
    ),
    color='country:N',
    strokeDash='country:N'
)
plt.show()
```

:::{.callout-warning}
## Altair plot render

Quarto 貌似渲染不出 altair 画的图。日后琢磨。
:::

# Using Python Visualization Libraries in RStudio

## Matplotlib

```{python}
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(0)

mu = 200
sigma = 25
x = np.random.normal(mu, sigma, size=100)

fig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(8, 4))

ax0.hist(x, 20, density=1, histtype='stepfilled', facecolor='g', alpha=0.75)
ax0.set_title('stepfilled')

# Create a histogram by providing the bin edges (unequally spaced).
bins = [100, 150, 180, 195, 205, 220, 250, 300]
ax1.hist(x, bins, density=1, histtype='bar', rwidth=0.8)
ax1.set_title('unequal bins')
fig.tight_layout()
plt.show()
```

## Pandas

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dd = pd.DataFrame(np.random.randn(10, 10)).applymap(abs)
dd = dd.cumsum()

plt.figure()
dd.plot.bar(colormap='Greens')
plt.show()
```

## Seaborn

```{python}
#| warning: false
#| messahe: false
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sns.set(style="whitegrid", palette="muted")

# Load the example iris dataset
iris = sns.load_dataset("iris")

# "Melt" the dataset to "long-form" or "tidy" representation
iris = pd.melt(iris, "species", var_name="measurement")
plt.figure()

# Draw a categorical scatterplot to show each observation
sns.swarmplot(x="measurement", y="value", hue="species", palette=["r", "c", "y"], data=iris)
plt.show()
```

